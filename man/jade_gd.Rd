% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/jade_gd_danse1.R
\name{jade_gd}
\alias{jade_gd}
\title{Fit JADE using gradient descent}
\usage{
jade_gd(y, gamma, pos = NULL, lambda1 = NULL, lambda2 = NULL,
  sample.size = NULL, ord = 0, sds = NULL, fit.var = NULL,
  var.wts = NULL, subset.wts = NULL, theta0 = NULL, duals0 = NULL,
  verbose = FALSE, sep.tol = 0.001, max.it = 1000, thresh = 1e-08,
  stepsize = NULL, eps = 0, cv.metric = c("mse", "abs", "pois"),
  debug = FALSE)
}
\arguments{
\item{y}{Data matrix of size p x K. May contain NA values but may not contain rows which are all NA.}

\item{gamma}{Fusion penalty.}

\item{pos}{Position vector of length p. If missing will use 1:p.}

\item{lambda1}{Smoothing penalty vecor of length K.
If not provided, lambda will be chosen by cross validation.}

\item{lambda2}{Parameter for L_1 penalty on fitted values. Defaults to 0.}

\item{sample.size}{Vector of sample sizes of length K.
If missing sample sizes are assumed to be 1.}

\item{ord}{Order of polynomial to fit. May be 0, 1, or 2.}

\item{sds}{Matrix of estimated standard deviations of size p x K.
These are the inverse of the diagonal elements of \eqn{A){i}}{A_i}.
Only the relative sizes of \code{sds} is important.}

\item{fit.var}{Matrix of size p x K of estimated variance of trendfiltering fits.
This will be used to construct the pairwise weight matrices \eqn{W}{W}.
Currently this is only supported for \eqn{K=2}.
\code{fit.var} can be estimated by bootstrapping. See \code{\link{bs_var}}.}

\item{var.wts}{If \code{fit.var} is not provided, the diagonal
elements of \eqn{W} may be specified here.
Since pairwise weights are currently only allowed for \eqn{K=2},
\code{var.wts} must be a vector of length p.}

\item{subset.wts}{This option can be used to obtain a de-biased fit with the
\eqn{\gamma} penalty only applied to pairs of points previously determined to be fused.
It should be a list of lists of the same format as the output of \code{\link{get_sep}}.
Elements are vectors of length p of 0s and 1s with 0 indicating
that the pair of points should not be penalized.}

\item{theta0,duals0}{Starting values for \eqn{\theta} and the dual variable.
If a solution has been found for a nearby value
of \eqn{\gamma} using these values can improve convergence time.
If not provided the solution at \eqn{\gamma = 0} is used.}

\item{verbose}{Be chattier.}

\item{max.it}{Maximum number of iterations.}

\item{tol}{Tolerance for declaring points separated.
Separation can be recalculated with a different value of \code{tol} using \code{\link{get_sep}}.}
}
\value{
A \code{jade_tf} object. This really just a list with values including
\describe{
  \item{\code{fits}}{A p x K matrix of solutions.}
  \item{\code{n}}{Number of iterations to convergence}
 \item{\code{duals}}{Dual variable}
  \item{\code{sep}}{List of lists giving separation. See \code{\link{get_sep}}}
}
As well as all of the original parameters.
}
\description{
Solves the same problem solved by \code{\link{jade_admm}}.
This function also allows an additional L_1 penalty on the fitted values.
}

